# Simple nginx configuration without Lua
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size {{ nginx_config.client_max_body_size | default('10m') }};

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=100r/s;

    # Upstream configuration for Wazuh services
    upstream wazuh_manager {
        least_conn;
        server wazuh-manager:55000 max_fails=3 fail_timeout=30s;
        keepalive {{ nginx_config.upstream_keepalive | default('32') }};
    }

    upstream wazuh_dashboard {
        least_conn;
        server wazuh-dashboard:5601 max_fails=3 fail_timeout=30s;
        keepalive {{ nginx_config.upstream_keepalive | default('32') }};
    }

    upstream wazuh_indexer {
        least_conn;
        server wazuh-indexer:9200 max_fails=3 fail_timeout=30s;
        keepalive {{ nginx_config.upstream_keepalive | default('32') }};
    }

    # Health check server
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Health check endpoint - Main endpoint you requested
        location /health {
            limit_req zone=health burst=20 nodelay;
            access_log off;
            
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            
            return 200 '{
    "status": "success",
    "message": "Wazuh Stack is healthy and operational",
    "timestamp": "$time_iso8601",
    "data": {
        "services": {
            "nginx": {
                "status": "running",
                "role": "load_balancer",
                "uptime": "active"
            },
            "wazuh-manager": {
                "status": "proxied",
                "role": "security_manager",
                "endpoint": "/api/"
            },
            "wazuh-dashboard": {
                "status": "proxied", 
                "role": "web_interface",
                "endpoint": "/dashboard/"
            },
            "wazuh-indexer": {
                "status": "proxied",
                "role": "data_storage",
                "endpoint": "/indexer/"
            }
        },
        "load_balancer": {
            "status": "active",
            "algorithm": "least_conn",
            "health_checks": "enabled"
        },
        "environment": "production",
        "stack_name": "{{ stack_name }}",
        "version": "1.0.0"
    }
}';
        }

        # Simple status endpoint
        location /health/simple {
            limit_req zone=health burst=50 nodelay;
            access_log off;
            
            add_header Content-Type application/json;
            return 200 '{"status":"success","message":"OK"}';
        }

        # Status endpoint for monitoring tools
        location /status {
            limit_req zone=health burst=50 nodelay;
            access_log off;
            
            add_header Content-Type text/plain;
            return 200 "OK";
        }

        # Service-specific health checks
        location /health/manager {
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://wazuh_manager/;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_set_header Host $host;
            
            # Transform response to JSON
            add_header Content-Type application/json;
            
            # If upstream is healthy, return success
            error_page 200 = @manager_healthy;
            error_page 502 503 504 = @manager_unhealthy;
        }

        location @manager_healthy {
            internal;
            add_header Content-Type application/json;
            return 200 '{"service":"wazuh-manager","status":"healthy","message":"Manager API is responding"}';
        }

        location @manager_unhealthy {
            internal;
            add_header Content-Type application/json;
            return 503 '{"service":"wazuh-manager","status":"unhealthy","message":"Manager API is not responding"}';
        }

        location /health/dashboard {
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://wazuh_dashboard/app/wazuh;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_set_header Host $host;
            
            error_page 200 302 = @dashboard_healthy;
            error_page 502 503 504 = @dashboard_unhealthy;
        }

        location @dashboard_healthy {
            internal;
            add_header Content-Type application/json;
            return 200 '{"service":"wazuh-dashboard","status":"healthy","message":"Dashboard is responding"}';
        }

        location @dashboard_unhealthy {
            internal;
            add_header Content-Type application/json;
            return 503 '{"service":"wazuh-dashboard","status":"unhealthy","message":"Dashboard is not responding"}';
        }

        location /health/indexer {
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://wazuh_indexer/_cluster/health;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_set_header Host $host;
            
            error_page 200 = @indexer_healthy;
            error_page 401 403 = @indexer_auth_healthy;  # Indexer responds but requires auth
            error_page 502 503 504 = @indexer_unhealthy;
        }

        location @indexer_healthy {
            internal;
            add_header Content-Type application/json;
            return 200 '{"service":"wazuh-indexer","status":"healthy","message":"Indexer cluster is responding"}';
        }

        location @indexer_auth_healthy {
            internal;
            add_header Content-Type application/json;
            return 200 '{"service":"wazuh-indexer","status":"healthy","message":"Indexer is responding (auth required)"}';
        }

        location @indexer_unhealthy {
            internal;
            add_header Content-Type application/json;
            return 503 '{"service":"wazuh-indexer","status":"unhealthy","message":"Indexer is not responding"}';
        }

        # Redirect root to dashboard
        location / {
            return 301 /dashboard/;
        }

        # Proxy to Wazuh Dashboard
        location /dashboard/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://wazuh_dashboard/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout {{ nginx_config.proxy_connect_timeout | default('75s') }};
            proxy_send_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            proxy_read_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Proxy to Wazuh API
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://wazuh_manager/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout {{ nginx_config.proxy_connect_timeout | default('75s') }};
            proxy_send_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            proxy_read_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Proxy to Wazuh Indexer
        location /indexer/ {
            limit_req zone=api burst=10 nodelay;
            
            rewrite ^/indexer/(.*) /$1 break;
            proxy_pass http://wazuh_indexer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout {{ nginx_config.proxy_connect_timeout | default('75s') }};
            proxy_send_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            proxy_read_timeout {{ nginx_config.proxy_read_timeout | default('300s') }};
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Error pages
        error_page 404 /404.json;
        location = /404.json {
            internal;
            add_header Content-Type application/json;
            return 404 '{"error": "Not Found", "status": 404, "message": "The requested resource was not found"}';
        }

        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            internal;
            add_header Content-Type application/json;
            return 500 '{"error": "Internal Server Error", "status": 500, "message": "An internal server error occurred"}';
        }
    }
}

name: Wazuh Docker Swarm CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-and-test:
    name: Deploy Stack and Run Tests
    runs-on: ubuntu-latest
    # needs: lint-ansible
    
    services:
      # Docker-in-Docker for testing Docker Swarm
      docker:
        image: docker:24-dind
        options: --privileged
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ansible \
          docker.io \
          docker-compose \
          chromium-browser \
          xvfb
        
    - name: Start Docker
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        
    - name: Set up Docker Swarm
      run: |
        sudo docker swarm init
        
    - name: Create test inventory
      run: |
        mkdir -p ansible/inventory/test
        cat > ansible/inventory/test/host << EOF
        [swarm_managers]
        localhost ansible_connection=local ansible_become=yes
        
        [swarm_managers:vars]
        stack_name=wazuh-test
        domain_name=localhost
        email_address=test@example.com
        wazuh_version=4.7.2
        elastic_version=7.17.9
        nginx_port=8080
        dashboard_port=5601
        api_port=55000
        EOF
        
    - name: Run Ansible deployment
      run: |
        cd ansible
        ansible-playbook -i inventory/test/host playbooks/deploy.yml \
          --extra-vars "letsencrypt_staging=true" \
          --skip-tags "letsencrypt"
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
        # Check if services are running
        sudo docker service ls
        
        # Wait for Wazuh Manager to be healthy
        timeout 300 bash -c 'until sudo docker service logs wazuh-test_wazuh-manager 2>&1 | grep -q "Wazuh manager started"; do sleep 10; done' || true
        
    - name: Create test environment
      run: |
        cp tests/.env.example tests/.env
        cat >> tests/.env << EOF
        WAZUH_HOST=localhost
        WAZUH_PORT=8080
        WAZUH_DASHBOARD_PORT=5601
        WAZUH_API_PORT=55000
        HEADLESS=true
        CI=true
        EOF
        
    - name: Run smoke tests
      run: |
        export CI=true
        export HEADLESS=true
        ./tests/run_tests.sh smoke
        
    - name: Run API tests
      run: |
        export CI=true
        ./tests/run_tests.sh api
        
    - name: Run UI tests
      run: |
        export CI=true
        export HEADLESS=true
        ./tests/run_tests.sh ui
        
    - name: Collect service logs on failure
      if: failure()
      run: |
        echo "=== Docker Service Status ==="
        sudo docker service ls
        
        echo "=== Service Logs ==="
        for service in $(sudo docker service ls --format "{{.Name}}"); do
          echo "--- $service ---"
          sudo docker service logs --tail 50 $service || true
        done
        
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: tests/reports/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-and-test, security-scan]
    if: always()
    
    steps:
    - name: Cleanup Docker resources
      run: |
        # This would be more relevant in a real infrastructure setup
        # For CI, the runner will be destroyed anyway
        echo "Cleanup completed in CI environment"
